#!/usr/bin/env python

import argparse
import os
import subprocess
import sys
import time
from ConfigParser import SafeConfigParser

import boto


aparser = argparse.ArgumentParser(description='Create an ec2 instance.')
aparser.add_argument('-f', '--file', metavar='file', dest='filename', default='ec2.conf',
                           help='Name of the config file in etc/private - defaults to ec2.conf')
aparser.add_argument('section', metavar='section', type=str,
                           help='Name of the section within the config file')
aparser.add_argument('name', metavar='name', type=str,
                           help='Name of the quickness machine')
args = aparser.parse_args()


cparser = SafeConfigParser()
cparser.read(os.path.join('etc/private/', args.filename))


profile_text = """
### Quickness
. \$HOME/.quickness_repo/etc/profile"""

custom_user_data = """#!/bin/bash
su -l -c "mkdir bin && echo 'echo -n loading' > bin/bootstrap_status && chmod 755 bin/bootstrap_status" ubuntu
export DEBIAN_FRONTEND=noninteractive
apt-get update
apt-get -o Dpkg::Options::="--force-confnew" --force-yes -fuy upgrade
apt-get install -y \
    autoconf \
    automake \
    build-essential \
    git \
    ntp \
    python-setuptools

if [ -d /home/ubuntu ]; then
    su -l -c "git clone git://github.com/jserver/quickness.git .quickness_repo" ubuntu
    su -l -c "echo '%s' > .profile" ubuntu
fi

cp /home/ubuntu/.quickness_repo/etc/motd.tail /etc/motd.tail
su -l -c "echo 'echo -n finished' > bin/bootstrap_status" ubuntu
""" % profile_text

conn = boto.connect_ec2()

# Make sure quickness name is going to be unique
quick_machines = []
instances = conn.get_all_instances()
for res in instances:
    for instance in res.instances:
        if instance.tags.has_key('Quickness'):
            quick_machines.append(instance.tags.get('Quickness'))

if args.name in quick_machines:
    print 'Quickness machine names must be unique'
    sys.exit()

if args.section not in cparser.sections():
    print 'Section not found'
    sys.exit()

print 'Attempting to create an instance with Quickness tag %s...' % args.name
image = conn.get_image(cparser.get(args.section, 'image'))

reservation = image.run(key_name=cparser.get(args.section, 'key_name'),
                        instance_type=cparser.get(args.section, 'instance_type'),
                        placement=cparser.get(args.section, 'placement'),
                        security_group_ids=[cparser.get(args.section, 'security_group')],
                        user_data=custom_user_data)
instance = reservation.instances[0]
conn.create_tags([instance.id], {'Name': 'quickness', 'Quickness': args.name})

while True:
    time.sleep(20)
    status = instance.update()
    if status == 'running':
        break
    print status

# Now that the server is up and running, check to see when bootstrapping finishes
print 'Your instance is now running, waiting for bootstrapping to complete...'
aws_identity = os.environ['AWS_IDENTITY']
if aws_identity:
    # give it a min to get the bootstrapping started
    time.sleep(60)
    file_exists = False
    while True:
        time.sleep(30)
        if not file_exists:
            status = subprocess.check_output(
                    'ssh -o "StrictHostKeyChecking no" -i $AWS_IDENTITY ubuntu@%s "test -e bin/bootstrap_status && echo -n true || echo -n false"' % instance.public_dns_name,
                    shell=True)
            if status == 'true':
                print 'bootstrap started'
                file_exists = True
            else:
                print 'waiting on bootstrap'
            continue
        status = subprocess.check_output(
                'ssh -o "StrictHostKeyChecking no" -i $AWS_IDENTITY ubuntu@%s bin/bootstrap_status' % instance.public_dns_name,
                shell=True)
        if status == 'finished':
            break
        print status

    # time to copy in the private files
    subprocess.call('scp -i $AWS_IDENTITY etc/private/* ubuntu@%s:~/.quickness_repo/etc/private' % instance.public_dns_name, shell=True)
    subprocess.call('scp -i $AWS_IDENTITY formulas/*.private ubuntu@%s:~/.quickness_repo/formulas' % instance.public_dns_name, shell=True)

else:
    print 'Please set the AWS_IDENTITY environment variable to login to your new machine'

print '%s [%s]: %s (%s)' % (args.name, instance.id, instance.state, instance.public_dns_name)
print 'login in to your new machine using the command - bin/quick_ec2 ssh %s' % args.name
